/**
 * Ïπ¥Î©îÎùº Ïª®Ìä∏Î°§Îü¨ Î™®Îìà - Ïπ¥Î©îÎùº Î∞è Î∑∞ Ï†úÏñ¥ Ï†ÑÎã¥ (Í∞úÏÑ†Îêú Î≤ÑÏ†Ñ)
 */
import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.128.0/build/three.module.js';
import { OrbitControls } from 'https://cdn.jsdelivr.net/npm/three@0.128.0/examples/jsm/controls/OrbitControls.js';

export class CameraController extends EventTarget {
    constructor(sceneManager, canvasContainer) {
        super();
        this.sceneManager = sceneManager;
        this.canvasContainer = canvasContainer;
        this.perspectiveCamera = null;
        this.orthographicCamera = null;
        this.activeCamera = null;
        this.controls = null;
    }

    /**
     * Ïπ¥Î©îÎùº Ï¥àÍ∏∞Ìôî
     */
    init() {
        console.log('üì∑ Camera Controller Ï¥àÍ∏∞Ìôî ÏãúÏûë...');
        
        const aspect = this.canvasContainer.clientWidth / this.canvasContainer.clientHeight;
        
        // Perspective Ïπ¥Î©îÎùº ÏÑ§Ï†ï (Îçî ÎÑìÏùÄ ÏãúÏïºÍ∞Å)
        this.perspectiveCamera = new THREE.PerspectiveCamera(60, aspect, 0.1, 5000);
        
        // Orthographic Ïπ¥Î©îÎùº ÏÑ§Ï†ï
        const frustumSize = 200;
        this.orthographicCamera = new THREE.OrthographicCamera(
            frustumSize * aspect / -2, frustumSize * aspect / 2, 
            frustumSize / 2, frustumSize / -2, 
            0.1, 5000
        );
        
        // Í∏∞Î≥∏ Ïπ¥Î©îÎùºÎ•º perspectiveÎ°ú ÏÑ§Ï†ï
        this.activeCamera = this.perspectiveCamera;

        // Ïª®Ìä∏Î°§ ÏÑ§Ï†ï
        this.controls = new OrbitControls(this.activeCamera, this.sceneManager.getRenderer().domElement);
        this.controls.enableDamping = true;
        this.controls.dampingFactor = 0.05;
        this.controls.enableZoom = true;
        this.controls.enableRotate = true;
        this.controls.enablePan = true;
        
        // Ï¥àÍ∏∞ Ïπ¥Î©îÎùº ÏúÑÏπò ÏÑ§Ï†ï (Îçî Í∞ÄÍπåÏù¥, Îçî Ï¢ãÏùÄ Í∞ÅÎèÑ)
        this.setInitialCameraPosition();

        console.log('‚úÖ Camera Controller Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
        console.log('üì∑ Ï¥àÍ∏∞ Ïπ¥Î©îÎùº ÏúÑÏπò:', this.activeCamera.position);
    }

    /**
     * Ï¥àÍ∏∞ Ïπ¥Î©îÎùº ÏúÑÏπò ÏÑ§Ï†ï
     */
    setInitialCameraPosition() {
        // Îçî ÎÇòÏùÄ Ï¥àÍ∏∞ Î∑∞Î•º ÏúÑÌïú ÏúÑÏπò ÏÑ§Ï†ï
        this.perspectiveCamera.position.set(100, 80, 200);
        this.perspectiveCamera.lookAt(0, 0, 0);
        
        this.orthographicCamera.position.set(0, 100, 200);
        this.orthographicCamera.lookAt(0, 0, 0);
        
        // Ïª®Ìä∏Î°§ ÌÉÄÍ≤ü ÏÑ§Ï†ï
        this.controls.target.set(0, 0, 0);
        this.controls.update();
    }

    /**
     * Î∑∞ Î¶¨ÏÖã (Î™®Îç∏Ïóê ÎßûÏ∂∞ ÏûêÎèô Ï°∞Ï†ï)
     */
    resetView() {
        const currentModel = this.sceneManager.getCurrentModel();
        
        if (currentModel) {
            // Î™®Îç∏Ïù¥ ÏûàÏùÑ Îïå - Î™®Îç∏Ïóê ÎßûÏ∂∞ Ïπ¥Î©îÎùº ÏúÑÏπò Ï°∞Ï†ï
            this.fitCameraToModel(currentModel);
        } else {
            // Î™®Îç∏Ïù¥ ÏóÜÏùÑ Îïå - Í∏∞Î≥∏ ÏúÑÏπò
            this.setInitialCameraPosition();
        }
        
        this.dispatchEvent(new CustomEvent('viewReset'));
    }

    /**
     * Î™®Îç∏Ïóê ÎßûÏ∂∞ Ïπ¥Î©îÎùº Ï°∞Ï†ï (Îçî ÌôïÏã§Ìïú Î≤ÑÏ†Ñ)
     */
    fitCameraToModel(model) {
        if (!model) {
            console.warn('‚ö†Ô∏è Î™®Îç∏Ïù¥ ÏóÜÏñ¥ÏÑú Ïπ¥Î©îÎùºÎ•º Ï°∞Ï†ïÌï† Ïàò ÏóÜÏäµÎãàÎã§.');
            return;
        }

        console.log('üì∑ Î™®Îç∏Ïóê ÎßûÏ∂∞ Ïπ¥Î©îÎùº Ï°∞Ï†ï ÏãúÏûë...');
        
        const box = new THREE.Box3().setFromObject(model);
        const center = box.getCenter(new THREE.Vector3());
        const size = box.getSize(new THREE.Vector3());
        
        console.log('üì¶ Î™®Îç∏ Ï†ïÎ≥¥:', { 
            center: center.clone(), 
            size: size.clone(),
            boundingBox: box 
        });
        
        const maxDim = Math.max(size.x, size.y, size.z);
        
        // Îçî ÏïàÏ†ÑÌïú Í±∞Î¶¨ Í≥ÑÏÇ∞ (FOVÍ∞Ä ÏóÜÏùÑ ÏàòÎèÑ ÏûàÏúºÎØÄÎ°ú)
        const fov = this.activeCamera.fov || 60;
        const distance = maxDim * 3; // Îã®ÏàúÌïòÏßÄÎßå ÌôïÏã§Ìïú Í±∞Î¶¨ Í≥ÑÏÇ∞
        
        // Perspective Ïπ¥Î©îÎùº ÏúÑÏπò ÏÑ§Ï†ï
        if (this.activeCamera.isPerspectiveCamera) {
            // Î™®Îç∏ÏùÑ Ïûò Î≥º Ïàò ÏûàÎäî Í∞ÅÎèÑÎ°ú Ïπ¥Î©îÎùº Î∞∞Ïπò
            this.activeCamera.position.set(
                center.x + distance * 0.7,
                center.y + distance * 0.5, 
                center.z + distance * 0.9
            );
            this.activeCamera.lookAt(center);
            
            console.log('üì∑ Perspective Ïπ¥Î©îÎùº ÏúÑÏπò ÏÑ§Ï†ï:', this.activeCamera.position);
        } else {
            // Orthographic Ïπ¥Î©îÎùº
            this.activeCamera.position.set(center.x, center.y, center.z + distance);
            this.activeCamera.lookAt(center);
            
            // Ï§å Ï°∞Ï†ï
            const margin = 1.5; // Ïó¨Ïú† Í≥µÍ∞Ñ
            this.activeCamera.zoom = Math.min(
                this.canvasContainer.clientWidth / (size.x * margin),
                this.canvasContainer.clientHeight / (size.y * margin)
            );
            this.activeCamera.updateProjectionMatrix();
            
            console.log('üì∑ Orthographic Ïπ¥Î©îÎùº ÏÑ§Ï†ï:', {
                position: this.activeCamera.position,
                zoom: this.activeCamera.zoom
            });
        }
        
        // Ïª®Ìä∏Î°§ ÌÉÄÍ≤üÏùÑ Î™®Îç∏ Ï§ëÏã¨ÏúºÎ°ú ÏÑ§Ï†ï
        this.controls.target.copy(center);
        this.controls.update();
        
        console.log('‚úÖ Ïπ¥Î©îÎùº Ï°∞Ï†ï ÏôÑÎ£å');
        
        // Ï°∞Ï†ï ÏôÑÎ£å Ïù¥Î≤§Ìä∏ Î∞úÏÉù
        this.dispatchEvent(new CustomEvent('cameraFitted', {
            detail: { center, size, distance }
        }));
    }

    /**
     * Ïπ¥Î©îÎùº Ï†ÑÌôò
     */
    switchCamera(type) {
        const previousCamera = this.activeCamera;
        
        if (type === 'perspective') {
            this.activeCamera = this.perspectiveCamera;
            this.dispatchEvent(new CustomEvent('cameraChanged', { 
                detail: { type: 'perspective', showStandardViews: false }
            }));
        } else { 
            this.activeCamera = this.orthographicCamera;
            this.dispatchEvent(new CustomEvent('cameraChanged', { 
                detail: { type: 'orthographic', showStandardViews: true }
            }));
        }
        
        // Ïπ¥Î©îÎùº Ï†ÑÌôò Ïãú Ïù¥Ï†Ñ ÏúÑÏπò Ïú†ÏßÄ
        if (previousCamera && this.activeCamera) {
            this.activeCamera.position.copy(previousCamera.position);
            this.activeCamera.lookAt(this.controls.target);
        }
        
        this.controls.object = this.activeCamera;
        this.onWindowResize();
        this.controls.update();
        
        console.log('üì∑ Ïπ¥Î©îÎùº Ï†ÑÌôò:', type);
    }

    /**
     * ÌëúÏ§Ä Î∑∞ ÏÑ§Ï†ï
     */
    setStandardView(direction) {
        const currentModel = this.sceneManager.getCurrentModel();
        if (!currentModel) {
            console.warn('‚ö†Ô∏è Î™®Îç∏Ïù¥ ÏóÜÏñ¥ÏÑú ÌëúÏ§Ä Î∑∞Î•º ÏÑ§Ï†ïÌï† Ïàò ÏóÜÏäµÎãàÎã§.');
            return;
        }
        
        // ÏßÅÍµê Ïπ¥Î©îÎùºÎ°ú Ï†ÑÌôò
        if (this.activeCamera !== this.orthographicCamera) {
            this.switchCamera('orthographic');
        }

        const box = new THREE.Box3().setFromObject(currentModel);
        const center = box.getCenter(new THREE.Vector3());
        const size = box.getSize(new THREE.Vector3());
        
        const distance = Math.max(size.x, size.y, size.z) * 2;
        
        // Î∞©Ìñ•Ïóê Îî∞Î•∏ Ïπ¥Î©îÎùº ÏúÑÏπò ÏÑ§Ï†ï
        switch(direction) {
            case 'top': 
                this.activeCamera.position.set(center.x, center.y + distance, center.z);
                this.activeCamera.up.set(0, 0, -1); // ÏúÑÏ™Ω Î∞©Ìñ• Ï°∞Ï†ï
                break;
            case 'side': 
                this.activeCamera.position.set(center.x + distance, center.y, center.z);
                this.activeCamera.up.set(0, 1, 0); // ÏúÑÏ™Ω Î∞©Ìñ• Î¶¨ÏÖã
                break;
            case 'front':
            default: 
                this.activeCamera.position.set(center.x, center.y, center.z + distance);
                this.activeCamera.up.set(0, 1, 0); // ÏúÑÏ™Ω Î∞©Ìñ• Î¶¨ÏÖã
                break;
        }
        
        // Ï§å Ï°∞Ï†ï
        const fitOffset = 1.2;
        const aspect = this.canvasContainer.clientWidth / this.canvasContainer.clientHeight;
        
        let zoomSize;
        if (direction === 'top') {
            zoomSize = Math.max(size.x, size.z);
        } else if (direction === 'side') {
            zoomSize = Math.max(size.y, size.z);
        } else {
            zoomSize = Math.max(size.x, size.y);
        }

        if (aspect > 1) {
            this.orthographicCamera.zoom = (this.orthographicCamera.top - this.orthographicCamera.bottom) / (zoomSize * fitOffset);
        } else {
            this.orthographicCamera.zoom = (this.orthographicCamera.right - this.orthographicCamera.left) / (zoomSize * fitOffset * aspect);
        }
        
        this.controls.target.copy(center);
        this.activeCamera.lookAt(center);
        this.orthographicCamera.updateProjectionMatrix();
        this.controls.update();

        this.dispatchEvent(new CustomEvent('standardViewSet', { 
            detail: { direction }
        }));
        
        console.log(`üì∑ ÌëúÏ§Ä Î∑∞ ÏÑ§Ï†ï: ${direction}`);
    }

    /**
     * ÏúàÎèÑÏö∞ Î¶¨ÏÇ¨Ïù¥Ï¶à Ï≤òÎ¶¨
     */
    onWindowResize() {
        if (!this.activeCamera) return;
        
        const aspect = this.canvasContainer.clientWidth / this.canvasContainer.clientHeight;
        
        if (this.activeCamera.isPerspectiveCamera) {
            this.activeCamera.aspect = aspect;
        } else {
            const frustumSize = 200 / (this.activeCamera.zoom || 1);
            this.activeCamera.left = frustumSize * aspect / -2;
            this.activeCamera.right = frustumSize * aspect / 2;
            this.activeCamera.top = frustumSize / 2;
            this.activeCamera.bottom = frustumSize / -2;
        }
        
        this.activeCamera.updateProjectionMatrix();
    }

    /**
     * Ïª®Ìä∏Î°§ ÏóÖÎç∞Ïù¥Ìä∏ (Ïï†ÎãàÎ©îÏù¥ÏÖò Î£®ÌîÑÏóêÏÑú Ìò∏Ï∂ú)
     */
    update() {
        if (this.controls) {
            this.controls.update();
        }
    }

    /**
     * ÌôúÏÑ± Ïπ¥Î©îÎùº Î∞òÌôò
     */
    getActiveCamera() {
        return this.activeCamera;
    }

    /**
     * Perspective Ïπ¥Î©îÎùº Î∞òÌôò
     */
    getPerspectiveCamera() {
        return this.perspectiveCamera;
    }

    /**
     * Orthographic Ïπ¥Î©îÎùº Î∞òÌôò
     */
    getOrthographicCamera() {
        return this.orthographicCamera;
    }

    /**
     * Ïª®Ìä∏Î°§ Î∞òÌôò
     */
    getControls() {
        return this.controls;
    }

    /**
     * Ïπ¥Î©îÎùº ÌÉÄÏûÖ ÌôïÏù∏
     */
    isOrthographic() {
        return this.activeCamera === this.orthographicCamera;
    }

    /**
     * Ïπ¥Î©îÎùº ÌÉÄÏûÖ ÌôïÏù∏
     */
    isPerspective() {
        return this.activeCamera === this.perspectiveCamera;
    }

    /**
     * Ï†ïÎ¶¨ (Î©îÎ™®Î¶¨ Ìï¥Ï†ú)
     */
    dispose() {
        if (this.controls) {
            this.controls.dispose();
        }
        
        console.log('üßπ Camera Controller Ï†ïÎ¶¨ ÏôÑÎ£å');
    }
}