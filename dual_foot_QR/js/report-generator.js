/**
 * Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±Í∏∞ Î™®Îìà - ÏñëÎ∞ú PDF Î∞è QR ÏΩîÎìú ÏÉùÏÑ± Ï†ÑÎã¥
 */
export class ReportGenerator extends EventTarget {
    constructor() {
        super();
        this.reportData = null;
    }

    /**
     * ÏñëÎ∞ú PDF Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±
     */
    generateDualFootPDFReport(leftMeasurements, rightMeasurements, leftFileName, rightFileName, sceneManager, activeCamera) {
        if (!leftMeasurements || !rightMeasurements || Object.keys(leftMeasurements).length === 0 || Object.keys(rightMeasurements).length === 0) {
            this.dispatchEvent(new CustomEvent('reportError', {
                detail: { message: 'ÏñëÎ∞ú Ï∏°Ï†ï Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§. Î®ºÏ†Ä ÏñëÎ∞ú 3D Î™®Îç∏ÏùÑ Î°úÎìúÌï¥Ï£ºÏÑ∏Ïöî.' }
            }));
            return;
        }

        // jsPDF ÎùºÏù¥Î∏åÎü¨Î¶¨ ÌôïÏù∏
        if (typeof window.jspdf === 'undefined') {
            console.error('jsPDF ÎùºÏù¥Î∏åÎü¨Î¶¨Í∞Ä Î°úÎìúÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
            this.dispatchEvent(new CustomEvent('reportError', {
                detail: { message: 'PDF ÎùºÏù¥Î∏åÎü¨Î¶¨Î•º Î°úÎìúÌïòÎäî Ï§ëÏûÖÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.' }
            }));
            return;
        }

        try {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();

            // Ï†úÎ™©
            doc.setFontSize(20);
            doc.text('Dual Foot 3D Analysis Report', 20, 30);

            // ÌååÏùº Ï†ïÎ≥¥
            doc.setFontSize(12);
            doc.text(`Left Foot: ${leftFileName}`, 20, 50);
            doc.text(`Right Foot: ${rightFileName}`, 20, 60);
            doc.text(`Analysis Date: ${new Date().toLocaleDateString()}`, 20, 70);

            // ÏñëÎ∞ú Ï∏°Ï†ï Îç∞Ïù¥ÌÑ∞ ÏÑπÏÖò
            this.addDualMeasurementSection(doc, leftMeasurements, rightMeasurements, 90);

            // ÏñëÎ∞ú ÎπÑÍµê Î∂ÑÏÑù ÏÑπÏÖò
            const comparisonYPos = this.addComparisonSection(doc, leftMeasurements, rightMeasurements, 160);

            // ÏñëÎ∞ú ÎπÑÏú® Î∂ÑÏÑù ÏÑπÏÖò
            const ratiosYPos = this.addDualRatiosSection(doc, leftMeasurements, rightMeasurements, comparisonYPos + 30);

            // Î∞ú Ïú†Ìòï Î∂ÑÏÑù ÏÑπÏÖò
            const analysisYPos = this.addDualAnalysisSection(doc, leftMeasurements, rightMeasurements, ratiosYPos + 30);

            // Ï∂îÏ≤ú ÏÇ¨Ìï≠ ÏÑπÏÖò
            const recommendationsYPos = this.addDualRecommendationsSection(doc, leftMeasurements, rightMeasurements, analysisYPos + 30);

            // ÏÉà ÌéòÏù¥ÏßÄ Ï∂îÍ∞Ä
            doc.addPage();

            // 3D Î™®Îç∏ Ïù¥ÎØ∏ÏßÄ Ï∂îÍ∞Ä
            this.addDual3DModelImage(doc, sceneManager, activeCamera, 20);

            // PDF Ï†ÄÏû•
            const pdfFileName = `dual_foot_analysis_${new Date().toISOString().slice(0, 10)}.pdf`;
            doc.save(pdfFileName);

            console.log('üìÑ ÏñëÎ∞ú PDF Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± ÏôÑÎ£å:', pdfFileName);

            this.dispatchEvent(new CustomEvent('reportGenerated', {
                detail: { fileName: pdfFileName, type: 'dual-foot-pdf' }
            }));

        } catch (error) {
            console.error('‚ùå ÏñëÎ∞ú PDF ÏÉùÏÑ± Ïò§Î•ò:', error);
            this.dispatchEvent(new CustomEvent('reportError', {
                detail: { message: 'ÏñëÎ∞ú PDF ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', error }
            }));
        }
    }

    /**
     * Î∞ú Ïú†Ìòï Î∂ÑÏÑù (ÌïµÏã¨ Î©îÏÑúÎìú)
     */
    getFootTypeAnalysis(measurements) {
        if (!measurements.length || !measurements.width || !measurements.height) {
            return {
                footType: 'Analysis Pending',
                archType: 'Analysis Pending',
                description: 'Insufficient data for comprehensive analysis'
            };
        }

        const lwRatio = measurements.length / measurements.width;
        const hlRatio = measurements.height / measurements.length;

        let footType = '';
        let description = '';

        if (lwRatio > 2.6) {
            footType = 'Long Foot Type';
            description = 'Elongated foot shape with longer toes and narrow profile';
        } else if (lwRatio < 2.2) {
            footType = 'Wide Foot Type';
            description = 'Broader foot shape with wider forefoot area';
        } else {
            footType = 'Normal Foot Type';
            description = 'Well-balanced foot proportions with standard dimensions';
        }

        let archType = '';
        if (hlRatio > 0.25) {
            archType = 'High Arch';
        } else if (hlRatio < 0.18) {
            archType = 'Low Arch / Flat Foot';
        } else {
            archType = 'Normal Arch';
        }

        return { footType, archType, description };
    }

    /**
     * ÏñëÎ∞ú Ï∏°Ï†ï Îç∞Ïù¥ÌÑ∞ ÏÑπÏÖò Ï∂îÍ∞Ä
     */
    addDualMeasurementSection(doc, leftMeasurements, rightMeasurements, yPos) {
        doc.setFontSize(16);
        doc.text('Dual Foot Measurement Data', 20, yPos);

        doc.setFontSize(10);
        let currentY = yPos + 15;

        // ÏôºÎ∞ú Îç∞Ïù¥ÌÑ∞
        doc.setFontSize(12);
        doc.text('Left Foot Measurements:', 20, currentY);
        currentY += 10;
        doc.setFontSize(10);
        
        const leftTexts = [
            `Length: ${leftMeasurements.length?.toFixed(1) || 'N/A'} ${leftMeasurements.unit || 'mm'}`,
            `Width: ${leftMeasurements.width?.toFixed(1) || 'N/A'} ${leftMeasurements.unit || 'mm'}`,
            `Height: ${leftMeasurements.height?.toFixed(1) || 'N/A'} ${leftMeasurements.unit || 'mm'}`
        ];

        leftTexts.forEach(text => {
            doc.text(text, 25, currentY);
            currentY += 8;
        });

        currentY += 5;

        // Ïò§Î•∏Î∞ú Îç∞Ïù¥ÌÑ∞
        doc.setFontSize(12);
        doc.text('Right Foot Measurements:', 20, currentY);
        currentY += 10;
        doc.setFontSize(10);
        
        const rightTexts = [
            `Length: ${rightMeasurements.length?.toFixed(1) || 'N/A'} ${rightMeasurements.unit || 'mm'}`,
            `Width: ${rightMeasurements.width?.toFixed(1) || 'N/A'} ${rightMeasurements.unit || 'mm'}`,
            `Height: ${rightMeasurements.height?.toFixed(1) || 'N/A'} ${rightMeasurements.unit || 'mm'}`
        ];

        rightTexts.forEach(text => {
            doc.text(text, 25, currentY);
            currentY += 8;
        });

        return currentY;
    }

    /**
     * ÏñëÎ∞ú ÎπÑÍµê Î∂ÑÏÑù ÏÑπÏÖò Ï∂îÍ∞Ä
     */
    addComparisonSection(doc, leftMeasurements, rightMeasurements, yPos) {
        doc.setFontSize(16);
        doc.text('Bilateral Comparison Analysis', 20, yPos);

        doc.setFontSize(10);
        let currentY = yPos + 15;

        // Ï∞®Ïù¥ Í≥ÑÏÇ∞
        const lengthDiff = Math.abs(leftMeasurements.length - rightMeasurements.length);
        const widthDiff = Math.abs(leftMeasurements.width - rightMeasurements.width);
        const heightDiff = Math.abs(leftMeasurements.height - rightMeasurements.height);

        // ÎåÄÏπ≠ÏÑ± Ï†êÏàò Í≥ÑÏÇ∞
        const maxLength = Math.max(leftMeasurements.length, rightMeasurements.length);
        const maxWidth = Math.max(leftMeasurements.width, rightMeasurements.width);
        const maxHeight = Math.max(leftMeasurements.height, rightMeasurements.height);
        
        const lengthSymmetry = (1 - lengthDiff / maxLength) * 100;
        const widthSymmetry = (1 - widthDiff / maxWidth) * 100;
        const heightSymmetry = (1 - heightDiff / maxHeight) * 100;
        const overallSymmetry = Math.round((lengthSymmetry + widthSymmetry + heightSymmetry) / 3);

        const comparisonTexts = [
            `Length Difference: ${lengthDiff.toFixed(1)} mm`,
            `Width Difference: ${widthDiff.toFixed(1)} mm`,
            `Height Difference: ${heightDiff.toFixed(1)} mm`,
            `Overall Symmetry Score: ${overallSymmetry}%`
        ];

        comparisonTexts.forEach(text => {
            doc.text(text, 20, currentY);
            currentY += 10;
        });

        // ÎåÄÏπ≠ÏÑ± ÌèâÍ∞Ä
        let symmetryEvaluation = '';
        if (overallSymmetry >= 90) {
            symmetryEvaluation = 'Excellent bilateral symmetry';
        } else if (overallSymmetry >= 80) {
            symmetryEvaluation = 'Good bilateral symmetry with minor differences';
        } else if (overallSymmetry >= 70) {
            symmetryEvaluation = 'Moderate asymmetry observed';
        } else {
            symmetryEvaluation = 'Significant asymmetry - professional consultation recommended';
        }

        currentY += 5;
        doc.setFontSize(12);
        doc.text('Symmetry Assessment:', 20, currentY);
        currentY += 8;
        doc.setFontSize(10);
        doc.text(symmetryEvaluation, 20, currentY);
        currentY += 15;

        return currentY;
    }

    /**
     * ÏñëÎ∞ú ÎπÑÏú® Î∂ÑÏÑù ÏÑπÏÖò Ï∂îÍ∞Ä
     */
    addDualRatiosSection(doc, leftMeasurements, rightMeasurements, yPos) {
        doc.setFontSize(16);
        doc.text('Bilateral Ratio Analysis', 20, yPos);

        doc.setFontSize(10);
        let currentY = yPos + 15;

        // ÏôºÎ∞ú ÎπÑÏú®
        const leftLWRatio = (leftMeasurements.length / leftMeasurements.width).toFixed(2);
        const leftHLRatio = (leftMeasurements.height / leftMeasurements.length * 100).toFixed(1);

        // Ïò§Î•∏Î∞ú ÎπÑÏú®
        const rightLWRatio = (rightMeasurements.length / rightMeasurements.width).toFixed(2);
        const rightHLRatio = (rightMeasurements.height / rightMeasurements.length * 100).toFixed(1);

        const ratioTexts = [
            `Left Foot L/W Ratio: ${leftLWRatio}`,
            `Left Foot H/L Ratio: ${leftHLRatio}%`,
            `Right Foot L/W Ratio: ${rightLWRatio}`,
            `Right Foot H/L Ratio: ${rightHLRatio}%`
        ];

        ratioTexts.forEach(text => {
            doc.text(text, 20, currentY);
            currentY += 10;
        });

        return currentY;
    }

    /**
     * ÏñëÎ∞ú Î∞ú Ïú†Ìòï Î∂ÑÏÑù ÏÑπÏÖò Ï∂îÍ∞Ä
     */
    addDualAnalysisSection(doc, leftMeasurements, rightMeasurements, yPos) {
        doc.setFontSize(16);
        doc.text('Bilateral Foot Type Analysis', 20, yPos);

        doc.setFontSize(10);
        let currentY = yPos + 15;

        // ÏôºÎ∞ú Î∂ÑÏÑù
        const leftAnalysis = this.getFootTypeAnalysis(leftMeasurements);
        // Ïò§Î•∏Î∞ú Î∂ÑÏÑù
        const rightAnalysis = this.getFootTypeAnalysis(rightMeasurements);

        doc.setFontSize(12);
        doc.text('Left Foot Analysis:', 20, currentY);
        currentY += 8;
        doc.setFontSize(10);
        doc.text(`Foot Shape: ${leftAnalysis.footType}`, 25, currentY);
        currentY += 8;
        doc.text(`Arch Type: ${leftAnalysis.archType}`, 25, currentY);
        currentY += 15;

        doc.setFontSize(12);
        doc.text('Right Foot Analysis:', 20, currentY);
        currentY += 8;
        doc.setFontSize(10);
        doc.text(`Foot Shape: ${rightAnalysis.footType}`, 25, currentY);
        currentY += 8;
        doc.text(`Arch Type: ${rightAnalysis.archType}`, 25, currentY);
        currentY += 15;

        return currentY;
    }

    /**
     * ÏñëÎ∞ú Ï∂îÏ≤ú ÏÇ¨Ìï≠ ÏÑπÏÖò Ï∂îÍ∞Ä
     */
    addDualRecommendationsSection(doc, leftMeasurements, rightMeasurements, yPos) {
        doc.setFontSize(16);
        doc.text('Bilateral Recommendations', 20, yPos);

        doc.setFontSize(10);
        let currentY = yPos + 15;

        const recommendations = this.getDualFootRecommendations(leftMeasurements, rightMeasurements);

        recommendations.forEach(rec => {
            if (currentY > 260) {
                doc.addPage();
                currentY = 20;
            }
            doc.text(`‚Ä¢ ${rec}`, 20, currentY);
            currentY += 10;
        });

        return currentY;
    }

    /**
     * ÏñëÎ∞ú 3D Î™®Îç∏ Ïù¥ÎØ∏ÏßÄ Ï∂îÍ∞Ä
     */
    addDual3DModelImage(doc, sceneManager, activeCamera, yPos) {
        try {
            // ÏñëÎ∞ú Î∑∞Î°ú ÏÑ§Ï†ï
            sceneManager.setFootVisibility('both');
            
            const imageData = sceneManager.captureScreen(activeCamera);

            doc.setFontSize(16);
            doc.text('3D Dual Foot Model View', 20, yPos);
            doc.addImage(imageData, 'JPEG', 20, yPos + 10, 160, 120);
            
            // Í∞úÎ≥Ñ Î∞ú Ïù¥ÎØ∏ÏßÄÎèÑ Ï∂îÍ∞Ä
            yPos += 140;
            
            // ÏôºÎ∞úÎßå ÌëúÏãú
            sceneManager.setFootVisibility('left');
            const leftImageData = sceneManager.captureScreen(activeCamera);
            
            doc.setFontSize(12);
            doc.text('Left Foot', 20, yPos);
            doc.addImage(leftImageData, 'JPEG', 20, yPos + 5, 75, 60);
            
            // Ïò§Î•∏Î∞úÎßå ÌëúÏãú
            sceneManager.setFootVisibility('right');
            const rightImageData = sceneManager.captureScreen(activeCamera);
            
            doc.text('Right Foot', 110, yPos);
            doc.addImage(rightImageData, 'JPEG', 110, yPos + 5, 75, 60);
            
            // Îã§Ïãú ÏñëÎ∞ú ÌëúÏãúÎ°ú Î≥µÏõê
            sceneManager.setFootVisibility('both');
            
        } catch (error) {
            console.warn('ÏñëÎ∞ú 3D Î™®Îç∏ Ïù¥ÎØ∏ÏßÄ Ï∂îÍ∞Ä Ïã§Ìå®:', error);
        }
    }

    /**
     * ÏñëÎ∞ú Ï∂îÏ≤ú ÏÇ¨Ìï≠ ÏÉùÏÑ±
     */
    getDualFootRecommendations(leftMeasurements, rightMeasurements) {
        const recommendations = [];

        // ÏôºÎ∞ú Î∂ÑÏÑù
        const leftLWRatio = leftMeasurements.length / leftMeasurements.width;
        const leftHLRatio = leftMeasurements.height / leftMeasurements.length;

        // Ïò§Î•∏Î∞ú Î∂ÑÏÑù
        const rightLWRatio = rightMeasurements.length / rightMeasurements.width;
        const rightHLRatio = rightMeasurements.height / rightMeasurements.length;

        // ÌèâÍ∑† ÎπÑÏú®
        const avgLWRatio = (leftLWRatio + rightLWRatio) / 2;
        const avgHLRatio = (leftHLRatio + rightHLRatio) / 2;

        // ÎåÄÏπ≠ÏÑ± Î∂ÑÏÑù
        const lengthDiff = Math.abs(leftMeasurements.length - rightMeasurements.length);
        const widthDiff = Math.abs(leftMeasurements.width - rightMeasurements.width);
        const heightDiff = Math.abs(leftMeasurements.height - rightMeasurements.height);

        // ÎåÄÏπ≠ÏÑ± Í∏∞Î∞ò Ï∂îÏ≤ú
        if (lengthDiff > 5) {
            recommendations.push('Significant length difference detected - consider custom insoles for length compensation');
        }
        if (widthDiff > 3) {
            recommendations.push('Width asymmetry observed - wide-fitting shoes recommended for comfort');
        }
        if (heightDiff > 4) {
            recommendations.push('Height difference noted - arch support may help balance foot function');
        }

        // ÌèâÍ∑† Î∞ú ÌòïÌÉú Í∏∞Î∞ò Ï∂îÏ≤ú
        if (avgLWRatio > 2.6) {
            recommendations.push('Both feet show elongated shape - choose shoes with spacious toe boxes');
            recommendations.push('Regular or wide width fittings recommended for optimal comfort');
        } else if (avgLWRatio < 2.2) {
            recommendations.push('Both feet exhibit wider shape - wide-fitting shoes essential');
            recommendations.push('Avoid shoes with narrow or pointed toe designs');
        } else {
            recommendations.push('Both feet show normal proportions - standard width shoes suitable');
            recommendations.push('Most regular shoe designs should accommodate both feet well');
        }

        // ÌèâÍ∑† ÏïÑÏπò ÎÜíÏù¥ Í∏∞Î∞ò Ï∂îÏ≤ú
        if (avgHLRatio > 0.25) {
            recommendations.push('High arch structure detected in both feet - strong arch support recommended');
            recommendations.push('Choose shoes with excellent shock absorption capabilities');
            recommendations.push('Look for shoes with good lateral stability features');
        } else if (avgHLRatio < 0.18) {
            recommendations.push('Lower arch profile observed - motion control shoes may benefit both feet');
            recommendations.push('Firm heel counters recommended for enhanced stability');
            recommendations.push('Avoid excessive cushioning that may compromise support');
        } else {
            recommendations.push('Normal arch height in both feet - regular athletic shoes appropriate');
            recommendations.push('Moderate cushioning and stability features recommended');
        }

        // ÏñëÎ∞ú ÌäπÌôî Ï∂îÏ≤ú
        const maxLengthDiff = Math.max(lengthDiff, widthDiff, heightDiff);
        if (maxLengthDiff < 2) {
            recommendations.push('Excellent bilateral symmetry - standard shoe fitting approach suitable');
        } else if (maxLengthDiff > 5) {
            recommendations.push('Consider professional fitting consultation due to bilateral differences');
            recommendations.push('Custom orthotics may provide optimal support for both feet');
        }

        // Ï†ÑÎ∞òÏ†ÅÏù∏ Î∞ú Í±¥Í∞ï Ï∂îÏ≤ú
        recommendations.push('Regular foot exercises recommended to maintain flexibility and strength');
        recommendations.push('Monitor both feet for any changes during regular self-examinations');

        return recommendations;
    }

    /**
     * QR ÏΩîÎìú ÏÉùÏÑ± (ÏñëÎ∞ú ÏßÄÏõê)
     */
    generateQRCode(combinedMeasurements, fileName) {
        // Ï∏°Ï†ï Îç∞Ïù¥ÌÑ∞ Ïú†Ìö®ÏÑ± Ï≤¥ÌÅ¨
        if (!combinedMeasurements || Object.keys(combinedMeasurements).length === 0) {
            this.dispatchEvent(new CustomEvent('qrError', {
                detail: { message: 'Ï∏°Ï†ï Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§. Î®ºÏ†Ä ÏñëÎ∞ú 3D Î™®Îç∏ÏùÑ Î°úÎìúÌï¥Ï£ºÏÑ∏Ïöî.' }
            }));
            return;
        }

        // QR ÎùºÏù¥Î∏åÎü¨Î¶¨ ÌôïÏù∏
        if (typeof window.QRCode === 'undefined') {
            console.error('QRCode ÎùºÏù¥Î∏åÎü¨Î¶¨Í∞Ä Î°úÎìúÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
            this.dispatchEvent(new CustomEvent('qrError', {
                detail: { message: 'QR ÏΩîÎìú ÎùºÏù¥Î∏åÎü¨Î¶¨Î•º Î°úÎìúÌïòÏßÄ Î™ªÌñàÏäµÎãàÎã§. Ïä§ÌÅ¨Î¶ΩÌä∏ Ìè¨Ìï® Ïó¨Î∂ÄÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.' }
            }));
            return;
        }

        try {
            // ÏïïÏ∂ïÎêú Î¶¨Ìè¨Ìä∏ Îç∞Ïù¥ÌÑ∞ Íµ¨ÏÑ± (ÏñëÎ∞ú ÌèâÍ∑† ÏÇ¨Ïö©)
            this.reportData = this.createCompactReportData(combinedMeasurements, fileName);

            // ÏßßÏùÄ URL ÏÉùÏÑ± (ÏïïÏ∂ï)
            const shortURL = this.createShortMobileURL(this.reportData);
            console.log('üîó ÏñëÎ∞ú QRÏö© ÏïïÏ∂ï URL ÏÉùÏÑ±:', shortURL);
            console.log('üìè URL Í∏∏Ïù¥:', shortURL.length, 'Ïûê');

            // QR ÏΩîÎìú ÏÉùÏÑ± Ïù¥Î≤§Ìä∏
            this.dispatchEvent(new CustomEvent('qrGenerated', {
                detail: {
                    url: shortURL,
                    reportData: this.reportData
                }
            }));

        } catch (error) {
            console.error('‚ùå ÏñëÎ∞ú QR ÏΩîÎìú ÏÉùÏÑ± Ïò§Î•ò:', error);
            this.dispatchEvent(new CustomEvent('qrError', {
                detail: { message: 'ÏñëÎ∞ú QR ÏΩîÎìú ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', error }
            }));
        }
    }

    /**
     * ÏïïÏ∂ïÎêú Î¶¨Ìè¨Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± (ÏñëÎ∞ú ÏßÄÏõê)
     */
    createCompactReportData(measurements, fileName) {
        // ÌïµÏã¨ Îç∞Ïù¥ÌÑ∞Îßå ÏïïÏ∂ïÌïòÏó¨ Ï†ÄÏû• (ÏñëÎ∞ú ÌèâÍ∑† ÎòêÎäî Í∞úÎ≥Ñ Îç∞Ïù¥ÌÑ∞)
        const compact = {
            f: fileName.substring(0, 30),
            d: new Date().toISOString().substring(0, 10),
            m: {
                l: measurements.length ? Math.round(measurements.length * 10) / 10 : 0,
                w: measurements.width ? Math.round(measurements.width * 10) / 10 : 0,
                h: measurements.height ? Math.round(measurements.height * 10) / 10 : 0,
                u: measurements.unit || 'mm'
            },
            type: 'dual' // ÏñëÎ∞ú Î∂ÑÏÑùÏûÑÏùÑ ÌëúÏãú
        };

        // ÏñëÎ∞ú Í∞úÎ≥Ñ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ Ï∂îÍ∞Ä
        if (measurements.leftFoot && measurements.rightFoot) {
            compact.lf = {
                l: Math.round(measurements.leftFoot.length * 10) / 10,
                w: Math.round(measurements.leftFoot.width * 10) / 10,
                h: Math.round(measurements.leftFoot.height * 10) / 10
            };
            compact.rf = {
                l: Math.round(measurements.rightFoot.length * 10) / 10,
                w: Math.round(measurements.rightFoot.width * 10) / 10,
                h: Math.round(measurements.rightFoot.height * 10) / 10
            };
        }

        // Î∞ú Ïú†Ìòï Í∞ÑÎã®Ìûà Ïù∏ÏΩîÎî© (ÌèâÍ∑†Í∞í Í∏∞Ï§Ä)
        if (measurements.length && measurements.width) {
            const lwRatio = measurements.length / measurements.width;
            if (lwRatio > 2.6) compact.t = 'L'; // Long
            else if (lwRatio < 2.2) compact.t = 'W'; // Wide
            else compact.t = 'N'; // Normal

            // ÏïÑÏπò ÌÉÄÏûÖ
            const hlRatio = measurements.height / measurements.length;
            if (hlRatio > 0.25) compact.a = 'H'; // High
            else if (hlRatio < 0.18) compact.a = 'F'; // Flat
            else compact.a = 'N'; // Normal
        }

        return compact;
    }

    /**
     * ÏßßÏùÄ Î™®Î∞îÏùº URL ÏÉùÏÑ± (ÏñëÎ∞ú ÏßÄÏõê)
     */
    createShortMobileURL(compactData) {
        // ÏïïÏ∂ïÎêú JSONÏùÑ base64Î°ú Ïù∏ÏΩîÎî©
        const jsonString = JSON.stringify(compactData);
        const base64Data = btoa(unescape(encodeURIComponent(jsonString)));

        const ipAddress = '192.000.00.00'; // Ïã§Ï†ú IP Ï£ºÏÜåÎ°ú Î≥ÄÍ≤Ω ÌïÑÏöî
        const port = '5500';
        const shortURL = `http://${ipAddress}:${port}/mobile-report.html?data=${base64Data}`;

        console.log('üìä ÏñëÎ∞ú QR Îç∞Ïù¥ÌÑ∞ ÏïïÏ∂ï Ï†ïÎ≥¥:', {
            original: JSON.stringify(this.createReportData(compactData, '')).length,
            compressed: jsonString.length,
            base64: base64Data.length,
            finalURL: shortURL.length
        });

        return shortURL;
    }

    /**
     * Î¶¨Ìè¨Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± (Ìò∏ÌôòÏÑ± Ïú†ÏßÄ)
     */
    createReportData(measurements, fileName) {
        const len = measurements.length;
        const wid = measurements.width;
        const hei = measurements.height;

        return {
            fileName: fileName,
            analysisDate: new Date().toISOString(),
            measurements: {
                length: (typeof len === 'number') ? len.toFixed(1) : 'N/A',
                width: (typeof wid === 'number') ? wid.toFixed(1) : 'N/A',
                height: (typeof hei === 'number') ? hei.toFixed(1) : 'N/A',
                unit: measurements.unit || 'mm',
                confidence: measurements.confidence ?? 'N/A'
            },
            ratios: {
                lengthWidth: (len && wid) ? (len / wid).toFixed(2) : 'N/A',
                heightLength: (hei && len) ? ((hei / len) * 100).toFixed(1) + '%' : 'N/A'
            },
            analysis: this.getFootTypeAnalysis(measurements),
            recommendations: "dual-foot-analysis"
        };
    }

    /**
     * Ï†ïÎ¶¨ (Î©îÎ™®Î¶¨ Ìï¥Ï†ú)
     */
    dispose() {
        this.reportData = null;
        console.log('üßπ Report Generator (ÏñëÎ∞ú ÏßÄÏõê) Ï†ïÎ¶¨ ÏôÑÎ£å');
    }
}